
import type { WidgetTemplate } from './template-types.ts'

// Channel utility functions
function getChannelUrl(channel: any): string {
  switch (channel.type) {
    case 'whatsapp':
      return `https://wa.me/${channel.value.replace(/[^0-9]/g, '')}`;
    case 'telegram':
      return channel.value.startsWith('@') ? `https://t.me/${channel.value.slice(1)}` : `https://t.me/${channel.value}`;
    case 'email':
      return `mailto:${channel.value}`;
    case 'phone':
      return `tel:${channel.value}`;
    default:
      return channel.value.startsWith('http') ? channel.value : `https://${channel.value}`;
  }
}

function getChannelIcon(channel: any): string {
  const icons: Record<string, string> = {
    whatsapp: 'üì±',
    telegram: '‚úàÔ∏è',
    instagram: 'üì∑',
    messenger: 'üí¨',
    viber: 'üìû',
    skype: 'üíª',
    discord: 'üéÆ',
    tiktok: 'üéµ',
    youtube: 'üì∫',
    facebook: 'üë•',
    twitter: 'üê¶',
    linkedin: 'üíº',
    github: '‚ö°',
    website: 'üåê',
    chatbot: 'ü§ñ',
    email: '‚úâÔ∏è',
    phone: 'üìû',
    custom: 'üîó'
  };
  return icons[channel.type] || 'üîó';
}

function getChannelColor(type: string): string {
  const colors: Record<string, string> = {
    whatsapp: '#25d366',
    telegram: '#0088cc',
    instagram: '#e4405f',
    messenger: '#006aff',
    viber: '#665cac',
    skype: '#00aff0',
    discord: '#7289da',
    tiktok: '#000000',
    youtube: '#ff0000',
    facebook: '#1877f2',
    twitter: '#1da1f2',
    linkedin: '#0077b5',
    github: '#333333',
    website: '#6b7280',
    chatbot: '#3b82f6',
    email: '#ea4335',
    phone: '#34d399',
    custom: '#6b7280'
  };
  return colors[type] || '#6b7280';
}

// HTML Template
const htmlTemplate = `
  <div id="lovable-widget-container" style="position: fixed; z-index: 999999; bottom: 20px; {{POSITION_STYLE}}">
    <div id="lovable-widget-tooltip" style="display: none; position: absolute; background: rgba(34, 197, 94, 0.9); color: white; padding: 10px 16px; border-radius: 25px; font-size: 14px; white-space: nowrap; z-index: 1000000; {{TOOLTIP_POSITION_STYLE}} backdrop-filter: blur(10px); font-weight: 500; box-shadow: 0 4px 20px rgba(34, 197, 94, 0.3); visibility: hidden; opacity: 0; transition: all 0.3s ease;">
      {{TOOLTIP_TEXT}}
    </div>
    <button id="lovable-widget-button" style="width: {{BUTTON_SIZE}}px; height: {{BUTTON_SIZE}}px; border-radius: 50%; border: none; background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); color: white; cursor: pointer; box-shadow: 0 8px 25px rgba(34, 197, 94, 0.4); display: flex; align-items: center; justify-content: center; font-size: 20px; transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); position: relative; border: 3px solid rgba(255, 255, 255, 0.2);">
      {{BUTTON_ICON}}
    </button>

    <div id="lovable-widget-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.4); z-index: 1000001; backdrop-filter: blur(8px); visibility: hidden; opacity: 0; transition: all 0.3s ease;">
      <div style="position: absolute; bottom: 2%; right: 2%; background: white; border-radius: 20px; padding: 0; max-width: 400px; width: 90%; max-height: 80vh; overflow: hidden; box-shadow: 0 25px 50px rgba(0,0,0,0.15); border: 1px solid rgba(255, 255, 255, 0.2); transform: translateY(20px); transition: transform 0.3s ease;">
        <div style="padding: 8px 8px 10px 8px; border-bottom: 1px solid #f1f5f9; background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);">
          <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 16px;">
            <div style="display: flex; align-items: center; gap: 12px;">
              <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 18px; box-shadow: 0 4px 15px rgba(34, 197, 94, 0.3);">
                üëã
              </div>
              <div>
                <h3 style="margin: 0; font-size: 15px; font-weight: 600; color: #1e293b; line-height: 1.3;">{{GREETING_MESSAGE}}</h3>
              </div>
            </div>
            <button id="lovable-widget-close" style="background: rgba(148, 163, 184, 0.1); border: none; font-size: 20px; cursor: pointer; color: #64748b; padding: 8px; width: 36px; height: 36px; display: flex; align-items: center; justify-content: center; border-radius: 50%; transition: all 0.2s ease; font-weight: 300;">√ó</button>
          </div>
          {{VIDEO_CONTENT}}
        </div>
        <div style="padding: 24px 8px 8px 8px;">
          <div id="lovable-widget-channels" style="display: flex; flex-direction: column; gap: 12px;">
            <!-- Channels will be generated by JavaScript -->
          </div>
          
          <div class="lovable-empty-state" style="display: none; text-align: center; padding: 40px 20px; color: #64748b;">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
              <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/>
            </svg>
            <p>He√ß bir …ôlaq…ô m√∂vcud deyil</p>
          </div>
        </div>
      </div>
    </div>
  </div>
`;

// CSS Styles
const cssStyles = `
  #lovable-widget-button:hover {
    transform: scale(1.1);
    box-shadow: 0 12px 35px rgba(34, 197, 94, 0.5);
    background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
  }
  
  #lovable-widget-close:hover {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
    transform: rotate(90deg);
  }
  
  .channel-item {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 16px 10px;
    border: 1px solid #e2e8f0;
    background: white;
    text-decoration: none;
    color: #334155;
    font-weight: 500;
    transition: all 0.3s ease;
    position: relative;
    border-radius: 12px;
    cursor: pointer;
  }
  
  .channel-item:hover {
    border-color: #22c55e;
    background: #f0fdf4;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(34, 197, 94, 0.15);
  }
  
  .channel-icon {
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    font-size: 18px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    flex-shrink: 0;
    color: white;
  }
  
  .channel-info {
    flex: 1;
    min-width: 0;
  }
  
  .channel-label {
    font-weight: 600;
    font-size: 16px;
    color: #1e293b;
    margin: 0 0 4px 0;
    line-height: 1.3;
  }
  
  .channel-value {
    font-size: 14px;
    color: #64748b;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    margin: 0;
    line-height: 1.3;
  }
  
  .channel-arrow {
    width: 20px;
    height: 20px;
    color: #94a3b8;
    flex-shrink: 0;
    transition: all 0.3s ease;
    font-size: 16px;
  }
  
  .channel-item:hover .channel-arrow {
    color: #22c55e;
    transform: translateX(4px);
  }

  /* Parent channel with dropdown */
  .parent-channel-wrapper {
    position: relative;
    margin-bottom: 12px;
  }
  
  .parent-channel {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 16px 10px;
    border: 1px solid #e2e8f0;
    background: white;
    text-decoration: none;
    color: #334155;
    font-weight: 500;
    transition: all 0.3s ease;
    border-radius: 12px;
    cursor: pointer;
    width: 100%;
  }
  
  .parent-channel:hover {
    border-color: #22c55e;
    background: #f0fdf4;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(34, 197, 94, 0.15);
  }
  
  .dropdown-toggle {
    background: none;
    border: none;
    padding: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.3s ease;
    margin-left: auto;
  }
  
  .dropdown-toggle:hover {
    background: rgba(34, 197, 94, 0.1);
  }
  
  .dropdown-arrow {
    width: 16px;
    height: 16px;
    transition: transform 0.3s ease;
    color: #64748b;
  }
  
  .dropdown-arrow.rotated {
    transform: rotate(180deg);
  }
  
  .child-count {
    position: absolute;
    top: -8px;
    right: 8px;
    background: #3b82f6;
    color: white;
    font-size: 11px;
    font-weight: 600;
    padding: 2px 6px;
    border-radius: 10px;
    min-width: 18px;
    text-align: center;
    line-height: 1.2;
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
    z-index: 10;
  }
  
  /* Dropdown */
  .dropdown {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
    background: #f8f9fa;
    border-radius: 8px;
    margin-top: 8px;
    border: 1px solid #e9ecef;
  }
  
  .dropdown.show {
    max-height: 300px;
  }
  
  .dropdown-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    text-decoration: none;
    color: #374151;
    transition: all 0.2s ease;
    border-bottom: 1px solid #e9ecef;
    font-size: 14px;
  }
  
  .dropdown-item:last-child {
    border-bottom: none;
  }
  
  .dropdown-item:hover {
    background: #e9ecef;
    color: #1f2937;
  }
  
  .dropdown-icon {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    font-size: 14px;
    flex-shrink: 0;
    color: white;
  }
  
  .dropdown-info {
    flex: 1;
    min-width: 0;
  }
  
  .dropdown-label {
    font-weight: 500;
    color: #1f2937;
    margin: 0 0 2px 0;
    line-height: 1.3;
  }
  
  .dropdown-value {
    font-size: 12px;
    color: #6b7280;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    margin: 0;
    line-height: 1.3;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .dropdown {
      margin-top: 5px;
    }
  }
`;

// JavaScript Logic
const jsLogic = `
  console.log('Widget loading with channels:', {{CHANNELS_DATA}});
  
  var channelsData = {{CHANNELS_DATA}};
  
  function openChannel(url) {
    window.open(url, '_blank');
  }
  
  function toggleDropdown(dropdownId) {
    var dropdown = document.getElementById(dropdownId);
    var arrow = document.querySelector('[data-dropdown="' + dropdownId + '"]');
    
    if (!dropdown || !arrow) return;
    
    // Close other dropdowns
    var allDropdowns = document.querySelectorAll('.dropdown');
    var allArrows = document.querySelectorAll('.dropdown-arrow');
    
    allDropdowns.forEach(function(d) {
      if (d.id !== dropdownId) {
        d.classList.remove('show');
      }
    });
    
    allArrows.forEach(function(a) {
      if (a !== arrow) {
        a.classList.remove('rotated');
      }
    });
    
    // Toggle current dropdown
    dropdown.classList.toggle('show');
    arrow.classList.toggle('rotated');
  }
  
  function generateChannelsHtml() {
    if (!channelsData || channelsData.length === 0) {
      var emptyState = document.querySelector('.lovable-empty-state');
      if (emptyState) {
        emptyState.style.display = 'block';
      }
      return '';
    }
    
    var html = '';
    
    for (var i = 0; i < channelsData.length; i++) {
      var channel = channelsData[i];
      var channelUrl = getChannelUrl(channel);
      var channelIcon = getChannelIcon(channel);
      var channelColor = getChannelColor(channel.type);
      
      // Parent channels with sub-channels
      if (channel.childChannels && channel.childChannels.length > 0) {
        var dropdownId = 'dropdown-' + channel.id;
        
        html += '<div class="parent-channel-wrapper">';
        
        // Parent channel with dropdown toggle
        html += '<div style="display: flex; align-items: center; border: 1px solid #e2e8f0; border-radius: 12px; background: white; transition: all 0.3s ease;">';
        
        // Main channel link
        html += '<a href="' + escapeHtml(channelUrl) + '" target="_blank" class="parent-channel" style="border: none; margin: 0; flex: 1;">';
        html += '<div class="channel-icon" style="background: ' + channelColor + ';">' + channelIcon + '</div>';
        html += '<div class="channel-info">';
        html += '<div class="channel-label">' + escapeHtml(channel.label) + '</div>';
        html += '<div class="channel-value">' + escapeHtml(channel.value) + '</div>';
        html += '</div>';
        html += '</a>';
        
        // Dropdown toggle button
        html += '<button class="dropdown-toggle" onclick="toggleDropdown(\'' + dropdownId + '\')">';
        html += '<svg class="dropdown-arrow" data-dropdown="' + dropdownId + '" viewBox="0 0 24 24" fill="currentColor">';
        html += '<path d="M7 10l5 5 5-5z"/>';
        html += '</svg>';
        html += '</button>';
        
        html += '<div class="child-count">' + (channel.childChannels.length + 1) + '</div>';
        html += '</div>';
        
        // Dropdown menu
        html += '<div class="dropdown" id="' + dropdownId + '">';
        
        // Add child channels to dropdown
        for (var j = 0; j < channel.childChannels.length; j++) {
          var childChannel = channel.childChannels[j];
          var childUrl = getChannelUrl(childChannel);
          var childIcon = getChannelIcon(childChannel);
          var childColor = getChannelColor(childChannel.type);
          
          html += '<a href="' + escapeHtml(childUrl) + '" target="_blank" class="dropdown-item">';
          html += '<div class="dropdown-icon" style="background: ' + childColor + ';">' + childIcon + '</div>';
          html += '<div class="dropdown-info">';
          html += '<div class="dropdown-label">' + escapeHtml(childChannel.label) + '</div>';
          html += '<div class="dropdown-value">' + escapeHtml(childChannel.value) + '</div>';
          html += '</div>';
          html += '</a>';
        }
        
        html += '</div>'; // dropdown close
        html += '</div>'; // parent-channel-wrapper close
      } else {
        // Regular single channel
        html += '<a href="' + escapeHtml(channelUrl) + '" target="_blank" class="channel-item">';
        html += '<div class="channel-icon" style="background: ' + channelColor + ';">' + channelIcon + '</div>';
        html += '<div class="channel-info">';
        html += '<div class="channel-label">' + escapeHtml(channel.label) + '</div>';
        html += '<div class="channel-value">' + escapeHtml(channel.value) + '</div>';
        html += '</div>';
        html += '<div class="channel-arrow">‚Üí</div>';
        html += '</a>';
      }
    }
    
    return html;
  }
  
  function escapeHtml(text) {
    if (!text) return '';
    return String(text)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;');
  }
  
  function initWidget() {
    console.log('Initializing widget...');
    
    var channelsContainer = document.querySelector('#lovable-widget-channels');
    if (channelsContainer) {
      var generatedHtml = generateChannelsHtml();
      channelsContainer.innerHTML = generatedHtml;
      console.log('Channels HTML generated and inserted');
    }
    
    var button = document.querySelector('#lovable-widget-button');
    var modal = document.querySelector('#lovable-widget-modal');
    var tooltip = document.querySelector('#lovable-widget-tooltip');
    var closeBtn = document.querySelector('#lovable-widget-close');
    
    if (!button || !modal) {
      console.error('Missing widget elements:', { button: !!button, modal: !!modal });
      return;
    }
    
    console.log('Widget elements found:', { button: !!button, modal: !!modal, closeBtn: !!closeBtn });
    
    // Button click to show modal
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      console.log('Button clicked, showing modal');
      modal.style.display = 'flex';
      modal.style.visibility = 'visible';
      modal.style.opacity = '1';
    });
    
    // Close button
    if (closeBtn) {
      closeBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('Close button clicked');
        modal.style.display = 'none';
        modal.style.visibility = 'hidden';
        modal.style.opacity = '0';
        
        // Close all dropdowns when modal closes
        var allDropdowns = document.querySelectorAll('.dropdown');
        var allArrows = document.querySelectorAll('.dropdown-arrow');
        allDropdowns.forEach(function(dropdown) {
          dropdown.classList.remove('show');
        });
        allArrows.forEach(function(arrow) {
          arrow.classList.remove('rotated');
        });
      });
    }
    
    // Modal backdrop click
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        console.log('Modal backdrop clicked');
        modal.style.display = 'none';
        modal.style.visibility = 'hidden';
        modal.style.opacity = '0';
        
        // Close all dropdowns when modal closes
        var allDropdowns = document.querySelectorAll('.dropdown');
        var allArrows = document.querySelectorAll('.dropdown-arrow');
        allDropdowns.forEach(function(dropdown) {
          dropdown.classList.remove('show');
        });
        allArrows.forEach(function(arrow) {
          arrow.classList.remove('rotated');
        });
      }
    });
    
    // ESC key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && modal.style.display === 'flex') {
        console.log('ESC key pressed');
        modal.style.display = 'none';
        modal.style.visibility = 'hidden';
        modal.style.opacity = '0';
        
        // Close all dropdowns when modal closes
        var allDropdowns = document.querySelectorAll('.dropdown');
        var allArrows = document.querySelectorAll('.dropdown-arrow');
        allDropdowns.forEach(function(dropdown) {
          dropdown.classList.remove('show');
        });
        allArrows.forEach(function(arrow) {
          arrow.classList.remove('rotated');
        });
      }
    });
    
    // Tooltip functionality
    if (tooltip && button) {
      if ('{{TOOLTIP_DISPLAY}}' === 'hover') {
        button.addEventListener('mouseenter', function() {
          tooltip.style.display = 'block';
          tooltip.style.visibility = 'visible';
          tooltip.style.opacity = '1';
        });
        
        button.addEventListener('mouseleave', function() {
          tooltip.style.display = 'none';
          tooltip.style.visibility = 'hidden';
          tooltip.style.opacity = '0';
        });
      } else if ('{{TOOLTIP_DISPLAY}}' === 'always') {
        tooltip.style.display = 'block';
        tooltip.style.visibility = 'visible';
        tooltip.style.opacity = '1';
      }
    }
    
    console.log('Widget initialized successfully');
  }
  
  // Global function for refreshing widget
  window.refreshWidget = function() {
    var channelsContainer = document.querySelector('#lovable-widget-channels');
    if (channelsContainer) {
      var generatedHtml = generateChannelsHtml();
      channelsContainer.innerHTML = generatedHtml;
    }
  };
  
  // Global function for opening channels
  window.openChannel = openChannel;
  
  // Global function for dropdown toggle
  window.toggleDropdown = toggleDropdown;
  
  // Initialize when ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWidget);
  } else {
    // Add a small delay to ensure elements are rendered
    setTimeout(initWidget, 100);
  }
`;

// Get JavaScript with utility functions
function getJavaScriptWithUtils(): string {
  const utils = `
    ${getChannelUrl.toString()}
    ${getChannelIcon.toString()}
    ${getChannelColor.toString()}
  `;
  
  return utils + jsLogic;
}

export const defaultTemplate: WidgetTemplate = {
  id: 'default',
  name: 'Modern Clean Template', 
  description: 'Modern and clean floating widget with green accent',
  html: htmlTemplate,
  css: cssStyles,
  js: getJavaScriptWithUtils()
};

export const getDefaultTemplate = () => defaultTemplate;
