import type { WidgetTemplate } from './template-types.ts'

export const defaultTemplate: WidgetTemplate = {
  id: 'default',
  name: 'Modern Clean Template', 
  description: 'Modern and clean floating widget with green accent',
  html: `
    <div id="lovable-widget-container" style="position: fixed; z-index: 999999; bottom: 20px; {{POSITION_STYLE}}">
      <div id="lovable-widget-tooltip" style="display: none; position: absolute; background: rgba(34, 197, 94, 0.9); color: white; padding: 10px 16px; border-radius: 25px; font-size: 14px; white-space: nowrap; z-index: 1000000; {{TOOLTIP_POSITION_STYLE}} backdrop-filter: blur(10px); font-weight: 500; box-shadow: 0 4px 20px rgba(34, 197, 94, 0.3);">
        {{TOOLTIP_TEXT}}
      </div>
      <button id="lovable-widget-button" style="width: {{BUTTON_SIZE}}px; height: {{BUTTON_SIZE}}px; border-radius: 50%; border: none; background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); color: white; cursor: pointer; box-shadow: 0 8px 25px rgba(34, 197, 94, 0.4); display: flex; align-items: center; justify-content: center; font-size: 20px; transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275); position: relative; border: 3px solid rgba(255, 255, 255, 0.2);">
        {{BUTTON_ICON}}
      </button>

      <div id="lovable-widget-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.4); z-index: 1000001; backdrop-filter: blur(8px);">
        <div style="position: absolute; bottom: 2%; right: 2%; background: white; border-radius: 20px; padding: 0; max-width: 400px; width: 90%; max-height: 80vh; overflow: hidden; box-shadow: 0 25px 50px rgba(0,0,0,0.15); border: 1px solid rgba(255, 255, 255, 0.2);">
          <div style="padding: 8px 8px 10px 8px; border-bottom: 1px solid #f1f5f9; background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 16px;">
              <div style="display: flex; align-items: center; gap: 12px;">
                <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 18px; box-shadow: 0 4px 15px rgba(34, 197, 94, 0.3);">
                  ðŸ‘‹
                </div>
                <div>
                  <h3 style="margin: 0; font-size: 15px; font-weight: 600; color: #1e293b; line-height: 1.3;">{{GREETING_MESSAGE}}</h3>
                </div>
              </div>
              <button id="lovable-widget-close" style="background: rgba(148, 163, 184, 0.1); border: none; font-size: 20px; cursor: pointer; color: #64748b; padding: 8px; width: 36px; height: 36px; display: flex; align-items: center; justify-content: center; border-radius: 50%; transition: all 0.2s ease; font-weight: 300;">Ã—</button>
            </div>
            {{VIDEO_CONTENT}}
          </div>
          <div style="padding: 24px 8px 8px 8px;">
            <div id="lovable-widget-channels" style="display: flex; flex-direction: column; gap: 12px;">
              <!-- Channels will be generated by JavaScript -->
            </div>
            
            <div class="lovable-empty-state" style="display: none; text-align: center; padding: 40px 20px; color: #64748b;">
              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/>
              </svg>
              <p>HeÃ§ bir É™laqÉ™ mÃ¶vcud deyil</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
  
  css: `
    #lovable-widget-button:hover {
      transform: scale(1.1);
      box-shadow: 0 12px 35px rgba(34, 197, 94, 0.5);
      background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
    }
    
    #lovable-widget-close:hover {
      background: rgba(239, 68, 68, 0.1);
      color: #ef4444;
      transform: rotate(90deg);
    }
    
    .lovable-channel-button {
      display: flex;
      align-items: center;
      gap: 16px;
      padding: 16px 10px;
      border: 1px solid #e2e8f061;
      background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
      text-decoration: none;
      color: #334155;
      font-weight: 500;
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      position: relative;
      overflow: hidden;
      border-radius: 12px;
    }
    
    .lovable-channel-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(34, 197, 94, 0.1), transparent);
      transition: left 0.5s ease;
    }
    
    .lovable-channel-button:hover::before {
      left: 100%;
    }
    
    .lovable-channel-button:hover {
      border-color: #22c55e;
      background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(34, 197, 94, 0.15);
    }
    
    .lovable-channel-icon {
      width: 44px;
      height: 44px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      font-size: 18px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      flex-shrink: 0;
    }
    
    .lovable-channel-info {
      flex: 1;
      min-width: 0;
    }
    
    .lovable-channel-label {
      font-weight: 600;
      font-size: 16px;
      color: #1e293b;
      margin: 0 0 4px 0;
      line-height: 1.3;
    }
    
    .lovable-channel-value {
      font-size: 14px;
      color: #64748b;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      margin: 0;
      line-height: 1.3;
    }
    
    .lovable-channel-arrow {
      width: 20px;
      height: 20px;
      color: #94a3b8;
      flex-shrink: 0;
      transition: all 0.3s ease;
      font-size: 16px;
    }
    
    .lovable-channel-button:hover .lovable-channel-arrow {
      color: #22c55e;
      transform: translateX(4px);
    }

    /* Channel group with hover submenu */
    .lovable-channel-group {
      position: relative;
    }
    
    .lovable-group-count {
      position: absolute;
      top: -8px;
      right: -8px;
      background: #3b82f6;
      color: white;
      font-size: 11px;
      font-weight: 600;
      padding: 2px 6px;
      border-radius: 10px;
      min-width: 18px;
      text-align: center;
      line-height: 1.2;
      box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
    }
    
    .lovable-hover-submenu {
      position: absolute;
      right: 100%;
      top: 0;
      margin-right: 12px;
      background: white;
      border-radius: 12px;
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
      min-width: 280px;
      max-width: 320px;
      border: 1px solid #e5e7eb;
      z-index: 1000002;
      opacity: 0;
      visibility: hidden;
      transform: translateX(10px);
      transition: all 0.3s ease;
      overflow: hidden;
    }
    
    .lovable-channel-group:hover .lovable-hover-submenu {
      opacity: 1;
      visibility: visible;
      transform: translateX(0);
    }
    
    .lovable-submenu-item {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 12px 16px;
      text-decoration: none;
      color: #374151;
      transition: all 0.2s ease;
      border-bottom: 1px solid #f3f4f6;
    }
    
    .lovable-submenu-item:last-child {
      border-bottom: none;
    }
    
    .lovable-submenu-item:hover {
      background: #f9fafb;
    }
    
    .lovable-submenu-item-icon {
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      font-size: 16px;
      flex-shrink: 0;
    }
    
    .lovable-submenu-item-info {
      flex: 1;
      min-width: 0;
    }
    
    .lovable-submenu-item-label {
      font-weight: 500;
      font-size: 14px;
      color: #1f2937;
      margin: 0 0 2px 0;
      line-height: 1.3;
    }
    
    .lovable-submenu-item-value {
      font-size: 12px;
      color: #6b7280;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      margin: 0;
      line-height: 1.3;
    }

    @media (max-width: 768px) {
      .lovable-hover-submenu {
        left: 100%;
        right: auto;
        margin-left: 12px;
        margin-right: 0;
      }
    }
  `,
  
  js: `
    console.log('=== DEFAULT TEMPLATE HOVER VERSION START ===');
    console.log('Loading template with channels:', {{CHANNELS_DATA}});
    
    const channelsData = {{CHANNELS_DATA}};
    console.log('Parsed channelsData:', channelsData);
    console.log('channelsData type:', typeof channelsData);
    console.log('channelsData length:', channelsData ? channelsData.length : 'null');
    
    // Global function to refresh widget content when channels change
    window.refreshWidget = function() {
      console.log('Refreshing widget content...');
      const channelsContainer = document.querySelector('#lovable-widget-channels');
      if (channelsContainer) {
        const generatedHtml = generateChannelsHtml();
        console.log('Refreshing with new HTML:', generatedHtml);
        channelsContainer.innerHTML = generatedHtml;
        
        // Re-add event listeners for channel clicks
        addChannelClickListeners();
      }
    };
    
    function generateChannelsHtml() {
      console.log('generateChannelsHtml called');
      
      if (!channelsData || channelsData.length === 0) {
        console.log('No channels data found, showing empty state');
        const emptyState = document.querySelector('.lovable-empty-state');
        if (emptyState) emptyState.style.display = 'block';
        return '';
      }
      
      console.log('Processing channels:', channelsData);
      let html = '';
      
      function processChannels(channels) {
        console.log('processChannels called with:', channels);
        
        channels.forEach(function(channel, index) {
          console.log('Processing channel ' + index + ':', channel);
          
          const channelUrl = getChannelUrl(channel);
          const channelIcon = getChannelIcon(channel);
          const channelColor = getChannelColor(channel.type);
          
          console.log('Channel URL:', channelUrl);
          console.log('Channel Icon:', channelIcon);
          console.log('Channel Color:', channelColor);
          
          // Check if channel has child channels (grouped channels)
          if (channel.childChannels && channel.childChannels.length > 0) {
            console.log('Processing grouped channel with ' + channel.childChannels.length + ' children');
            
            // Render parent channel with hover submenu
            html += '<div class="lovable-channel-group">';
            html += '<div class="lovable-channel-button" style="border-color: ' + channelColor + ';">';
            html += '<div class="lovable-channel-icon" style="background: ' + channelColor + ';">';
            html += channelIcon;
            html += '</div>';
            html += '<div class="lovable-channel-info">';
            html += '<div class="lovable-channel-label">' + channel.label + '</div>';
            html += '<div class="lovable-channel-value">' + (channel.childChannels.length + 1) + ' kanal</div>';
            html += '</div>';
            html += '<div class="lovable-channel-arrow">â€º</div>';
            html += '<div class="lovable-group-count">' + (channel.childChannels.length + 1) + '</div>';
            html += '</div>';
            
            // Render hover submenu with all channels (parent + children)
            html += '<div class="lovable-hover-submenu">';
            
            // Add parent channel as first item
            html += '<a href="' + channelUrl + '" target="_blank" class="lovable-submenu-item" data-channel-url="' + channelUrl + '">';
            html += '<div class="lovable-submenu-item-icon" style="background: ' + channelColor + ';">';
            html += channelIcon;
            html += '</div>';
            html += '<div class="lovable-submenu-item-info">';
            html += '<div class="lovable-submenu-item-label">' + channel.label + '</div>';
            html += '<div class="lovable-submenu-item-value">' + channel.value + '</div>';
            html += '</div>';
            html += '</a>';
            
            // Add child channels
            channel.childChannels.forEach(function(childChannel, childIndex) {
              console.log('Processing child channel ' + childIndex + ':', childChannel);
              
              const childUrl = getChannelUrl(childChannel);
              const childIcon = getChannelIcon(childChannel);
              const childColor = getChannelColor(childChannel.type);
              
              html += '<a href="' + childUrl + '" target="_blank" class="lovable-submenu-item" data-channel-url="' + childUrl + '">';
              html += '<div class="lovable-submenu-item-icon" style="background: ' + childColor + ';">';
              html += childIcon;
              html += '</div>';
              html += '<div class="lovable-submenu-item-info">';
              html += '<div class="lovable-submenu-item-label">' + childChannel.label + '</div>';
              html += '<div class="lovable-submenu-item-value">' + childChannel.value + '</div>';
              html += '</div>';
              html += '</a>';
            });
            html += '</div>';
            html += '</div>';
          } else {
            console.log('Processing regular channel');
            
            html += '<a href="' + channelUrl + '" target="_blank" class="lovable-channel-button" style="border-color: ' + channelColor + ';" data-channel-url="' + channelUrl + '">';
            html += '<div class="lovable-channel-icon" style="background: ' + channelColor + ';">';
            html += channelIcon;
            html += '</div>';
            html += '<div class="lovable-channel-info">';
            html += '<div class="lovable-channel-label">' + channel.label + '</div>';
            html += '<div class="lovable-channel-value">' + channel.value + '</div>';
            html += '</div>';
            html += '<div class="lovable-channel-arrow">â†’</div>';
            html += '</a>';
          }
        });
      }
      
      processChannels(channelsData);
      console.log('Generated HTML length:', html.length);
      return html;
    }
    
    function addChannelClickListeners() {
      console.log('Adding channel click listeners...');
      const channelsContainer = document.querySelector('#lovable-widget-channels');
      
      if (channelsContainer) {
        // Add event listeners for channel clicks using data attributes
        const channelButtons = channelsContainer.querySelectorAll('[data-channel-url]');
        console.log('Found channel buttons:', channelButtons.length);
        
        channelButtons.forEach(function(button, index) {
          console.log('Adding click listener to button ' + index);
          button.addEventListener('click', function(e) {
            e.preventDefault();
            const url = button.getAttribute('data-channel-url');
            console.log('Channel button clicked, opening:', url);
            window.open(url, '_blank');
          });
        });
      }
    }
    
    function getChannelUrl(channel) {
      console.log('getChannelUrl called for:', channel);
      
      switch (channel.type) {
        case 'whatsapp':
          return 'https://wa.me/' + channel.value.replace(/[^0-9]/g, '');
        case 'telegram':
          return channel.value.startsWith('http') ? channel.value : 'https://t.me/' + channel.value;
        case 'phone':
          return 'tel:' + channel.value;
        case 'email':
          return 'mailto:' + channel.value;
        case 'instagram':
          return channel.value.startsWith('http') ? channel.value : 'https://instagram.com/' + channel.value;
        case 'facebook':
          return channel.value.startsWith('http') ? channel.value : 'https://facebook.com/' + channel.value;
        default:
          return channel.value.startsWith('http') ? channel.value : 'https://' + channel.value;
      }
    }
    
    function getChannelIcon(channel) {
      if (channel.customIcon) {
        return '<img src="' + channel.customIcon + '" style="width: 20px; height: 20px;" alt="' + channel.type + '">';
      }

      const icons = {
        whatsapp: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/></svg>',
        telegram: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/></svg>',
        phone: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/></svg>',
        email: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/></svg>',
        instagram: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/></svg>',
        facebook: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/></svg>'
      };
      
      return icons[channel.type] || '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>';
    }
    
    function getChannelColor(type) {
      const colors = {
        whatsapp: '#25D366',
        telegram: '#0088CC',
        phone: '#34C759',
        email: '#007AFF',
        instagram: '#E4405F',
        facebook: '#1877F2'
      };
      return colors[type] || '#22c55e';
    }
    
    function initWidget() {
      console.log('initWidget called');
      
      const channelsContainer = document.querySelector('#lovable-widget-channels');
      console.log('Channels container found:', !!channelsContainer);
      
      if (channelsContainer) {
        const generatedHtml = generateChannelsHtml();
        console.log('Setting innerHTML with:', generatedHtml);
        channelsContainer.innerHTML = generatedHtml;
        
        // Add event listeners for channel clicks
        addChannelClickListeners();
      }
      
      const button = document.querySelector('#lovable-widget-button');
      const modal = document.querySelector('#lovable-widget-modal');
      const tooltip = document.querySelector('#lovable-widget-tooltip');
      const closeBtn = document.querySelector('#lovable-widget-close');
      
      console.log('Widget elements found:', {
        button: !!button,
        modal: !!modal,
        tooltip: !!tooltip,
        closeBtn: !!closeBtn
      });
      
      if (!button || !modal) {
        console.error('Missing required widget elements');
        return;
      }
      
      // Button click to show modal
      button.addEventListener('click', function(e) {
        console.log('Widget button clicked');
        e.preventDefault();
        e.stopPropagation();
        modal.style.display = 'flex';
        console.log('Widget modal opened');
      });
      
      // Close button
      if (closeBtn) {
        closeBtn.addEventListener('click', function(e) {
          console.log('Close button clicked');
          e.preventDefault();
          e.stopPropagation();
          modal.style.display = 'none';
          console.log('Widget modal closed');
        });
      }
      
      // Modal backdrop click
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          console.log('Modal backdrop clicked');
          modal.style.display = 'none';
        }
      });
      
      // ESC key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal.style.display === 'flex') {
          console.log('ESC key pressed, closing modal');
          modal.style.display = 'none';
        }
      });
      
      // Tooltip functionality
      if (tooltip && button) {
        if ('{{TOOLTIP_DISPLAY}}' === 'hover') {
          button.addEventListener('mouseenter', function() {
            tooltip.style.display = 'block';
          });
          
          button.addEventListener('mouseleave', function() {
            tooltip.style.display = 'none';
          });
        } else if ('{{TOOLTIP_DISPLAY}}' === 'always') {
          tooltip.style.display = 'block';
        }
      }
      
      console.log('Hover-based template initialized successfully');
    }
    
    window.openChannel = function(url) {
      console.log('openChannel called with:', url);
      window.open(url, '_blank');
    };
    
    if (document.readyState === 'loading') {
      console.log('Document still loading, waiting for DOMContentLoaded');
      document.addEventListener('DOMContentLoaded', initWidget);
    } else {
      console.log('Document ready, initializing widget immediately');
      initWidget();
    }
    
    console.log('=== DEFAULT TEMPLATE HOVER VERSION END ===');
  `
};

export const getDefaultTemplate = () => defaultTemplate;
