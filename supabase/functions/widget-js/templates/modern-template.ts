import type { WidgetTemplate } from '../template-types.ts'

export const getModernTemplate = (): WidgetTemplate => ({
  id: 'modern',
  name: 'Modern Gradient',
  description: 'Modern template with gradient effects and smooth animations',
  
  html: `
<!-- Modern Template -->
<div class="hiclient-widget-container" style="position: fixed; {{POSITION_STYLE}} bottom: 24px; z-index: 99999;">
  
  <!-- Main Button -->
  <div class="hiclient-widget-button" id="hiclient-widget-button" style="width: {{BUTTON_SIZE}}px; height: {{BUTTON_SIZE}}px;">
    <div class="hiclient-button-inner">
      {{BUTTON_ICON}}
    </div>
  </div>
  
  <!-- Tooltip -->
  <div class="hiclient-tooltip" id="hiclient-tooltip" style="{{TOOLTIP_POSITION_STYLE}} display: none;">
    {{TOOLTIP_TEXT}}
  </div>
</div>

<!-- Modal -->
<div class="hiclient-modal-backdrop" id="hiclient-modal-backdrop">
  <div class="hiclient-modal-content" id="hiclient-modal-content">
    <div class="hiclient-modal-header">
      <h3>{{GREETING_MESSAGE}}</h3>
      <button class="hiclient-modal-close" id="hiclient-modal-close" aria-label="Close">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="m18 6-12 12M6 6l12 12"/>
        </svg>
      </button>
    </div>
    
    {{VIDEO_CONTENT}}
    
    <div class="hiclient-channels-container">
      <!-- Channels will be generated by JavaScript -->
    </div>
    
    <div class="hiclient-empty-state" style="display: none;">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/>
      </svg>
      <p>Heç bir əlaqə mövcud deyil</p>
    </div>
  </div>
</div>`,

  css: `
/* Modern Template CSS */
.hiclient-widget-container {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif;
  user-select: none;
}

/* Main Button */
.hiclient-widget-button {
  border-radius: 50%;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, {{BUTTON_COLOR}}, #667eea);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  overflow: hidden;
  position: relative;
}

.hiclient-widget-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255,255,255,0.2), transparent);
  border-radius: 50%;
  transition: opacity 0.3s ease;
  opacity: 0;
}

.hiclient-widget-button:hover::before {
  opacity: 1;
}

.hiclient-widget-button:hover {
  transform: scale(1.1) rotate(5deg);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);
  background: linear-gradient(135deg, #764ba2, {{BUTTON_COLOR}});
}

.hiclient-button-inner {
  color: white;
  font-size: 24px;
  z-index: 1;
}

/* Tooltip */
.hiclient-tooltip {
  position: absolute;
  background: rgba(20, 20, 20, 0.9);
  color: white;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 13px;
  white-space: nowrap;
  z-index: 100000;
  transition: all 0.2s ease;
  pointer-events: none;
  backdrop-filter: blur(10px);
}

/* Modal */
.hiclient-modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  z-index: 100000;
  display: none;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(8px);
}

.hiclient-modal-backdrop.show {
  opacity: 1;
  display: flex;
}

.hiclient-modal-content {
  background: white;
  padding: 32px;
  border-radius: 20px;
  max-width: 420px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  transform: scale(0.9) translateY(20px);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
  position: relative;
}

.hiclient-modal-backdrop.show .hiclient-modal-content {
  transform: scale(1) translateY(0);
}

.hiclient-modal-close {
  position: absolute;
  top: 16px;
  right: 20px;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: none;
  background: #f1f5f9;
  border-radius: 50%;
  color: #64748b;
  transition: all 0.2s ease;
}

.hiclient-modal-close:hover {
  background: #e2e8f0;
  color: #334155;
  transform: scale(1.1);
}

.hiclient-modal-header h3 {
  margin: 0 40px 24px 0;
  font-size: 24px;
  font-weight: 700;
  color: #1e293b;
  line-height: 1.3;
  text-align: center;
}

.hiclient-video-container {
  margin-bottom: 24px;
}

.hiclient-video-player {
  width: 100%;
  border-radius: 12px;
  object-fit: cover;
}

.hiclient-channels-container {
  display: grid;
  gap: 12px;
  margin-top: 24px;
}

.hiclient-channel-item {
  transform: translateY(10px);
  opacity: 0;
  animation: slideInUp 0.4s ease forwards;
}

.hiclient-channel-item:nth-child(1) { animation-delay: 0.1s; }
.hiclient-channel-item:nth-child(2) { animation-delay: 0.2s; }
.hiclient-channel-item:nth-child(3) { animation-delay: 0.3s; }
.hiclient-channel-item:nth-child(4) { animation-delay: 0.4s; }
.hiclient-channel-item:nth-child(5) { animation-delay: 0.5s; }

@keyframes slideInUp {
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.hiclient-channel-btn {
  width: 100%;
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 16px 20px;
  border: 2px solid #e2e8f0;
  border-radius: 16px;
  background: white;
  color: #334155;
  text-decoration: none;
  font-weight: 600;
  font-size: 15px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.hiclient-channel-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
  transition: left 0.5s ease;
}

.hiclient-channel-btn:hover::before {
  left: 100%;
}

.hiclient-channel-btn:hover {
  transform: translateY(-2px) scale(1.02);
  border-color: {{BUTTON_COLOR}};
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.1);
  background: linear-gradient(135deg, #fafafa, #ffffff);
}

.hiclient-channel-icon {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 20px;
  flex-shrink: 0;
  background: linear-gradient(135deg, #667eea, #764ba2);
}

.hiclient-channel-label {
  flex: 1;
  text-align: left;
}

.hiclient-empty-state {
  text-align: center;
  padding: 40px 20px;
  color: #64748b;
}

.hiclient-empty-state svg {
  margin-bottom: 16px;
  opacity: 0.5;
}

/* Channel group styles */
.hiclient-channel-group {
  position: relative;
  margin-bottom: 12px;
}

.hiclient-group-trigger {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 16px 20px;
  border: 2px solid #e2e8f0;
  border-radius: 16px;
  background: white;
  color: #334155;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
}

.hiclient-group-trigger:hover {
  transform: translateY(-2px) scale(1.02);
  border-color: {{BUTTON_COLOR}};
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.1);
  background: linear-gradient(135deg, #fafafa, #ffffff);
}

.hiclient-group-dropdown {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
  background: #f8fafc;
  border-radius: 12px;
  margin-top: 8px;
  border: 1px solid #e2e8f0;
}

.hiclient-group-dropdown.show {
  max-height: 300px;
}

.hiclient-group-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 14px 16px;
  text-decoration: none;
  color: #334155;
  transition: all 0.2s ease;
  border-bottom: 1px solid #e2e8f0;
}

.hiclient-group-item:last-child {
  border-bottom: none;
}

.hiclient-group-item:hover {
  background: #f1f5f9;
}

.hiclient-group-item-icon {
  width: 36px;
  height: 36px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.hiclient-group-item-info {
  flex: 1;
  min-width: 0;
}

.hiclient-group-item-label {
  font-weight: 500;
  font-size: 14px;
  color: #334155;
  margin: 0 0 2px 0;
  line-height: 1.2;
}

.hiclient-group-item-value {
  font-size: 12px;
  color: #64748b;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  margin: 0;
  line-height: 1.2;
}

.hiclient-group-count {
  position: absolute;
  top: -8px;
  right: -8px;
  background: #3b82f6;
  color: white;
  font-size: 11px;
  font-weight: 600;
  padding: 2px 6px;
  border-radius: 10px;
  min-width: 18px;
  text-align: center;
  line-height: 1.2;
  box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
}

/* Mobile responsive */
@media (max-width: 768px) {
  .hiclient-modal-content {
    margin: 20px;
    padding: 24px;
    max-width: none;
  }
  
  .hiclient-modal-header h3 {
    font-size: 20px;
    margin-right: 30px;
  }
  
  .hiclient-channel-btn {
    padding: 14px 16px;
    gap: 12px;
  }
  
  .hiclient-channel-icon {
    width: 42px;
    height: 42px;
  }
}`,

  js: `
(function() {
  console.log('Modern template loading...');
  
  const channelsData = {{CHANNELS_DATA}};
  var isModalOpen = false;
  var currentOpenGroupId = null;
  
  function generateChannelsHtml() {
    if (!channelsData || channelsData.length === 0) {
      const emptyState = document.querySelector('.hiclient-empty-state');
      if (emptyState) emptyState.style.display = 'block';
      return '';
    }
    
    let html = '';
    
    function processChannels(channels, isChild = false) {
      channels.forEach(channel => {
        const channelUrl = getChannelUrl(channel);
        const channelIcon = getChannelIcon(channel);
        const channelColor = getChannelColor(channel.type);
        
        if (channel.childChannels && channel.childChannels.length > 0) {
          // Create a group with dropdown for channels with children
          const groupId = 'group-' + channel.id;
          
          html += '<div class="hiclient-channel-group hiclient-channel-item">';
          html += '<div class="hiclient-group-trigger" onclick="toggleChannelGroup(\'' + groupId + '\')">';
          html += '<div class="hiclient-channel-icon" style="background: ' + channelColor + ';">';
          html += channelIcon;
          html += '</div>';
          html += '<div class="hiclient-channel-label">' + escapeHtml(channel.label) + '</div>';
          html += '<div class="hiclient-group-count">' + (channel.childChannels.length + 1) + '</div>';
          html += '</div>';
          
          html += '<div class="hiclient-group-dropdown" id="' + groupId + '">';
          
          // Add parent channel as first item
          html += '<a href="' + escapeHtml(channelUrl) + '" target="_blank" class="hiclient-group-item" onclick="openChannel(\'' + escapeHtml(channelUrl) + '\'); return false;">';
          html += '<div class="hiclient-group-item-icon" style="background: ' + channelColor + ';">' + channelIcon + '</div>';
          html += '<div class="hiclient-group-item-info">';
          html += '<div class="hiclient-group-item-label">' + escapeHtml(channel.label) + ' (Primary)</div>';
          html += '<div class="hiclient-group-item-value">' + escapeHtml(channel.value) + '</div>';
          html += '</div>';
          html += '</a>';
          
          // Add child channels
          channel.childChannels.forEach(childChannel => {
            const childUrl = getChannelUrl(childChannel);
            const childIcon = getChannelIcon(childChannel);
            const childColor = getChannelColor(childChannel.type);
            
            html += '<a href="' + escapeHtml(childUrl) + '" target="_blank" class="hiclient-group-item" onclick="openChannel(\'' + escapeHtml(childUrl) + '\'); return false;">';
            html += '<div class="hiclient-group-item-icon" style="background: ' + childColor + ';">' + childIcon + '</div>';
            html += '<div class="hiclient-group-item-info">';
            html += '<div class="hiclient-group-item-label">' + escapeHtml(childChannel.label) + '</div>';
            html += '<div class="hiclient-group-item-value">' + escapeHtml(childChannel.value) + '</div>';
            html += '</div>';
            html += '</a>';
          });
          
          html += '</div>'; // End dropdown
          html += '</div>'; // End channel group
        } else {
          // Regular channel without children
          html += '<div class="hiclient-channel-item">';
          html += '<a href="' + escapeHtml(channelUrl) + '" target="_blank" class="hiclient-channel-btn" onclick="openChannel(\'' + escapeHtml(channelUrl) + '\'); return false;">';
          html += '<div class="hiclient-channel-icon" style="background: ' + channelColor + ';">';
          html += channelIcon;
          html += '</div>';
          html += '<span class="hiclient-channel-label">' + escapeHtml(channel.label) + '</span>';
          html += '</a>';
          html += '</div>';
        }
      });
    }
    
    processChannels(channelsData);
    return html;
  }
  
  function getChannelUrl(channel) {
    switch (channel.type) {
      case 'whatsapp':
        return 'https://wa.me/' + channel.value.replace(/\\D/g, '');
      case 'telegram':
        return channel.value.startsWith('http') ? channel.value : 'https://t.me/' + channel.value;
      case 'phone':
        return 'tel:' + channel.value;
      case 'email':
        return 'mailto:' + channel.value;
      case 'instagram':
        return channel.value.startsWith('http') ? channel.value : 'https://instagram.com/' + channel.value;
      case 'facebook':
        return channel.value.startsWith('http') ? channel.value : 'https://facebook.com/' + channel.value;
      default:
        return channel.value.startsWith('http') ? channel.value : 'https://' + channel.value;
    }
  }
  
  function getChannelIcon(channel) {
    if (channel.customIcon) {
      return '<img src="' + channel.customIcon + '" style="width: 20px; height: 20px; object-fit: contain;" alt="' + channel.type + '">';
    }

    const icons = {
      whatsapp: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/></svg>',
      telegram: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/></svg>',
      phone: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/></svg>',
      email: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/></svg>',
      instagram: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/></svg>',
      facebook: '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/></svg>'
    };
    
    return icons[channel.type] || '<svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>';
  }
  
  function getChannelColor(type) {
    const colors = {
      whatsapp: '#25D366',
      telegram: '#0088CC',
      phone: '#34C759',
      email: '#007AFF',
      instagram: '#E4405F',
      facebook: '#1877F2'
    };
    return colors[type] || '#667eea';
  }
  
  function escapeHtml(text) {
    if (!text) return '';
    return String(text)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
  
  function initWidget() {
    const channelsContainer = document.querySelector('.hiclient-channels-container');
    if (channelsContainer) {
      channelsContainer.innerHTML = generateChannelsHtml();
    }
    
    const button = document.getElementById('hiclient-widget-button');
    const modal = document.getElementById('hiclient-modal-backdrop');
    const tooltip = document.getElementById('hiclient-tooltip');
    const closeBtn = document.getElementById('hiclient-modal-close');
    
    if (!button || !modal) {
      console.error('Button or modal not found:', { button: !!button, modal: !!modal });
      return;
    }
    
    console.log('Found elements:', { button: !!button, modal: !!modal, tooltip: !!tooltip, closeBtn: !!closeBtn });
    
    // Modal açma - yalnız klik ilə
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      modal.style.display = 'flex';
      modal.classList.add('show');
      isModalOpen = true;
      
      console.log('Modern widget modal opened');
    });
    
    function closeModal() {
      if (modal && isModalOpen) {
        modal.classList.remove('show');
        isModalOpen = false;
        
        // Close any open dropdowns when modal closes
        if (currentOpenGroupId) {
          var dropdown = document.getElementById(currentOpenGroupId);
          if (dropdown) {
            dropdown.classList.remove('show');
          }
          currentOpenGroupId = null;
        }
        
        setTimeout(function() {
          modal.style.display = 'none';
        }, 300);
        
        console.log('Modern widget modal closed');
      }
    }
    
    if (closeBtn) {
      closeBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        closeModal();
      });
    }
    
    // Modal backdrop click to close
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // ESC key to close modal
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && modal.classList.contains('show')) {
        closeModal();
      }
    });
    
    // Alt kontakt dropdown-larına keçid edərkən modalı bağlama
    document.addEventListener('click', function(e) {
      if (isModalOpen && currentOpenGroupId) {
        var modalContent = document.getElementById('hiclient-modal-content');
        var clickedInsideModal = modalContent && modalContent.contains(e.target);
        var clickedOnTrigger = e.target.closest('.hiclient-group-trigger');
        var clickedOnDropdown = e.target.closest('.hiclient-group-dropdown');
        var clickedOnGroupItem = e.target.closest('.hiclient-group-item');
        
        // Alt kontaktlara və dropdown sahəsinə klik edərkən modalı bağlama
        if (clickedOnDropdown || clickedOnGroupItem) {
          return; // Modal açıq qalsın
        }
        
        // Yalnız başqa group trigger-ə klik edəndə və ya modal xaricində klik edəndə dropdown-ı bağla
        if (!clickedInsideModal || (clickedOnTrigger && !clickedOnTrigger.onclick.toString().includes(currentOpenGroupId))) {
          var dropdown = document.getElementById(currentOpenGroupId);
          if (dropdown) {
            dropdown.classList.remove('show');
          }
          currentOpenGroupId = null;
        }
      }
    });
    
    // Tooltip yalnız hover ilə
    if (tooltip && button) {
      if ('{{TOOLTIP_DISPLAY}}' === 'hover') {
        button.addEventListener('mouseenter', function() {
          tooltip.style.display = 'block';
          tooltip.style.opacity = '1';
        });
        
        button.addEventListener('mouseleave', function() {
          tooltip.style.opacity = '0';
          setTimeout(function() {
            if (tooltip.style.opacity === '0') {
              tooltip.style.display = 'none';
            }
          }, 200);
        });
      } else if ('{{TOOLTIP_DISPLAY}}' === 'always') {
        tooltip.style.display = 'block';
        tooltip.style.opacity = '1';
      }
    }
    
    console.log('Modern template initialized with click-to-open modal');
  }
  
  window.openChannel = function(url) {
    window.open(url, '_blank');
    console.log('Channel opened:', url);
  };
  
  window.toggleChannelGroup = function(groupId) {
    const dropdown = document.getElementById(groupId);
    if (dropdown) {
      // If this group is already open, close it
      if (currentOpenGroupId === groupId) {
        dropdown.classList.remove('show');
        currentOpenGroupId = null;
        console.log('Closed channel group:', groupId);
      } else {
        // Close any other open dropdown first
        if (currentOpenGroupId) {
          const otherDropdown = document.getElementById(currentOpenGroupId);
          if (otherDropdown) {
            otherDropdown.classList.remove('show');
          }
        }
        
        // Open this dropdown
        dropdown.classList.add('show');
        currentOpenGroupId = groupId;
        console.log('Opened channel group:', groupId);
      }
    }
  };
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWidget);
  } else {
    initWidget();
  }
})();`
});
