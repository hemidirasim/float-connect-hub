
import type { WidgetTemplate } from '../template-types.ts'

export const getModernTemplate = (): WidgetTemplate => ({
  id: 'modern',
  name: 'Modern Gradient',
  description: 'Modern template with gradient effects and smooth animations',
  html: `
<!-- Modern Template -->
<div class="hiclient-widget-container" style="position: fixed; {{POSITION_STYLE}} bottom: 24px; z-index: 99999;">
  
  <!-- Main Button -->
  <div class="hiclient-widget-button" style="width: {{BUTTON_SIZE}}px; height: {{BUTTON_SIZE}}px;">
    <div class="hiclient-button-inner">
      {{BUTTON_ICON}}
    </div>
  </div>
  
  <!-- Tooltip -->
  <div class="hiclient-tooltip" style="{{TOOLTIP_POSITION_STYLE}} display: none;">
    {{TOOLTIP_TEXT}}
  </div>
</div>

<!-- Modal -->
<div class="hiclient-modal-backdrop">
  <div class="hiclient-modal-content">
    <div class="hiclient-modal-header">
      <h3>{{GREETING_MESSAGE}}</h3>
      <button class="hiclient-modal-close" aria-label="Close">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="m18 6-12 12M6 6l12 12"/>
        </svg>
      </button>
    </div>
    
    {{VIDEO_CONTENT}}
    
    <div class="hiclient-channels-list" id="channels-container">
      <!-- Channels will be generated by JavaScript -->
    </div>
    
    <div class="hiclient-empty-state" style="display: none;">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/>
      </svg>
      <p>Heç bir əlaqə mövcud deyil</p>
    </div>
  </div>
</div>`,

  css: `
/* Modern Template CSS */
.hiclient-widget-container {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  user-select: none;
}

/* Main Button */
.hiclient-widget-button {
  width: {{BUTTON_SIZE}}px;
  height: {{BUTTON_SIZE}}px;
  border-radius: 50%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  cursor: pointer;
  position: relative;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 8px 32px rgba(102, 126, 234, 0.4);
  border: 3px solid rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
}

.hiclient-button-inner {
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 24px;
  transition: all 0.3s ease;
}

.hiclient-widget-button:hover {
  transform: scale(1.1) translateY(-2px);
  box-shadow: 0 12px 40px rgba(102, 126, 234, 0.6);
  background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
}

.hiclient-widget-button:active {
  transform: scale(0.95);
}

/* Tooltip */
.hiclient-tooltip {
  position: absolute;
  background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
  color: white;
  padding: 12px 16px;
  border-radius: 12px;
  font-size: 14px;
  font-weight: 500;
  white-space: nowrap;
  z-index: 100001;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  pointer-events: none;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.hiclient-tooltip::after {
  content: '';
  position: absolute;
  width: 8px;
  height: 8px;
  background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
  transform: rotate(45deg);
}

.hiclient-tooltip.show {
  opacity: 1;
  visibility: visible;
  transform: translateY(-2px);
}

.hiclient-tooltip.hide {
  opacity: 0;
  visibility: hidden;
  transform: translateY(2px);
}

/* Modal */
.hiclient-modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  backdrop-filter: blur(8px);
  z-index: 100000;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.hiclient-modal-backdrop.show {
  opacity: 1;
  visibility: visible;
}

.hiclient-modal-content {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border-radius: 24px;
  max-width: 420px;
  width: 90%;
  max-height: 85vh;
  overflow: hidden;
  transform: scale(0.8) translateY(40px);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(20px);
}

.hiclient-modal-backdrop.show .hiclient-modal-content {
  transform: scale(1) translateY(0);
}

.hiclient-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 32px 32px 16px 32px;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  border-bottom: 1px solid rgba(102, 126, 234, 0.1);
}

.hiclient-modal-header h3 {
  margin: 0;
  font-size: 24px;
  font-weight: 700;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.hiclient-modal-close {
  background: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(102, 126, 234, 0.2);
  cursor: pointer;
  color: #666;
  padding: 12px;
  border-radius: 12px;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  backdrop-filter: blur(10px);
}

.hiclient-modal-close:hover {
  background: rgba(102, 126, 234, 0.1);
  color: #667eea;
  transform: scale(1.05);
}

.hiclient-video-container {
  margin: 24px 32px;
}

.hiclient-video-player {
  width: 100%;
  border-radius: 16px;
  object-fit: cover;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.hiclient-channels-list {
  padding: 0 32px 32px 32px;
  max-height: 400px;
  overflow-y: auto;
}

.hiclient-channel-item {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 18px 20px;
  margin-bottom: 12px;
  background: rgba(255, 255, 255, 0.8);
  border: 2px solid rgba(102, 126, 234, 0.1);
  border-radius: 16px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  text-decoration: none;
  color: inherit;
  backdrop-filter: blur(10px);
  position: relative;
  overflow: hidden;
}

.hiclient-channel-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.hiclient-channel-item:last-child {
  margin-bottom: 0;
}

.hiclient-channel-item:hover {
  background: rgba(255, 255, 255, 0.95);
  border-color: rgba(102, 126, 234, 0.3);
  transform: translateY(-2px) scale(1.02);
  box-shadow: 0 12px 40px rgba(102, 126, 234, 0.2);
}

.hiclient-channel-item:hover::before {
  opacity: 1;
}

.hiclient-channel-icon {
  width: 52px;
  height: 52px;
  border-radius: 14px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  font-size: 24px;
  font-weight: 600;
  color: white;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
}

.hiclient-channel-item:hover .hiclient-channel-icon {
  transform: scale(1.1) rotate(5deg);
  box-shadow: 0 6px 24px rgba(102, 126, 234, 0.4);
}

.hiclient-channel-info {
  flex: 1;
  min-width: 0;
}

.hiclient-channel-label {
  font-weight: 700;
  font-size: 16px;
  color: #1a1a1a;
  margin: 0 0 4px 0;
  line-height: 1.3;
}

.hiclient-channel-value {
  font-size: 14px;
  color: #666;
  margin: 0;
  line-height: 1.3;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.hiclient-external-icon {
  width: 20px;
  height: 20px;
  color: #999;
  flex-shrink: 0;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.hiclient-channel-item:hover .hiclient-external-icon {
  color: #667eea;
  transform: translateX(4px) rotate(15deg);
}

.hiclient-empty-state {
  text-align: center;
  padding: 80px 32px;
  color: #999;
}

.hiclient-empty-state svg {
  margin-bottom: 20px;
  opacity: 0.6;
}

.hiclient-empty-state p {
  margin: 0;
  font-size: 16px;
  font-weight: 500;
}

/* Scrollbar styling */
.hiclient-channels-list::-webkit-scrollbar {
  width: 6px;
}

.hiclient-channels-list::-webkit-scrollbar-track {
  background: rgba(102, 126, 234, 0.1);
  border-radius: 3px;
}

.hiclient-channels-list::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 3px;
}

.hiclient-channels-list::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
}

/* Channel Group Styles */
.hiclient-channel-group {
  position: relative;
  margin-bottom: 12px;
}

.hiclient-group-trigger {
  position: relative;
}

.hiclient-group-trigger::after {
  content: '';
  position: absolute;
  top: 50%;
  right: 20px;
  width: 8px;
  height: 8px;
  border: 2px solid #667eea;
  border-left: none;
  border-bottom: none;
  transform: translateY(-50%) rotate(45deg);
  transition: transform 0.3s ease;
}

.hiclient-channel-group.expanded .hiclient-group-trigger::after {
  transform: translateY(-50%) rotate(135deg);
}

.hiclient-group-dropdown {
  max-height: 0;
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  margin-top: 8px;
  padding-left: 20px;
}

.hiclient-channel-group.expanded .hiclient-group-dropdown {
  max-height: 500px;
}

.hiclient-group-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 16px;
  margin-bottom: 8px;
  background: rgba(255, 255, 255, 0.6);
  border: 1px solid rgba(102, 126, 234, 0.1);
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  color: inherit;
  font-size: 14px;
}

.hiclient-group-item:hover {
  background: rgba(255, 255, 255, 0.9);
  border-color: rgba(102, 126, 234, 0.2);
  transform: translateX(4px);
}

.hiclient-group-item-icon {
  width: 36px;
  height: 36px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  color: white;
  flex-shrink: 0;
}

.hiclient-group-item-info {
  flex: 1;
  min-width: 0;
}

.hiclient-group-item-label {
  font-weight: 600;
  font-size: 14px;
  color: #1a1a1a;
  margin: 0 0 2px 0;
  line-height: 1.2;
}

.hiclient-group-item-value {
  font-size: 12px;
  color: #666;
  margin: 0;
  line-height: 1.2;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}`,

  js: `
console.log("Modern template initialized");

// Channel platform configurations
const platformConfig = {
  whatsapp: { icon: '💬', color: '#25d366', name: 'WhatsApp' },
  telegram: { icon: '✈️', color: '#0088cc', name: 'Telegram' },
  instagram: { icon: '📸', color: '#e4405f', name: 'Instagram' },
  messenger: { icon: '💬', color: '#006aff', name: 'Messenger' },
  viber: { icon: '📞', color: '#665cac', name: 'Viber' },
  skype: { icon: '📹', color: '#00aff0', name: 'Skype' },
  discord: { icon: '🎮', color: '#7289da', name: 'Discord' },
  tiktok: { icon: '🎵', color: '#000000', name: 'TikTok' },
  youtube: { icon: '📺', color: '#ff0000', name: 'YouTube' },
  facebook: { icon: '👥', color: '#1877f2', name: 'Facebook' },
  twitter: { icon: '🐦', color: '#1da1f2', name: 'Twitter' },
  linkedin: { icon: '💼', color: '#0077b5', name: 'LinkedIn' },
  github: { icon: '💻', color: '#333333', name: 'GitHub' },
  website: { icon: '🌐', color: '#6b7280', name: 'Website' },
  chatbot: { icon: '🤖', color: '#3b82f6', name: 'Chatbot' },
  email: { icon: '✉️', color: '#ea4335', name: 'Email' },
  phone: { icon: '📞', color: '#34d399', name: 'Telefon' },
  custom: { icon: '🔗', color: '#6b7280', name: 'Custom' }
};

function getPlatformConfig(type) {
  return platformConfig[type] || platformConfig.custom;
}

function generateChannelUrl(channel) {
  switch (channel.type) {
    case 'whatsapp':
      return 'https://wa.me/' + channel.value.replace(/[^0-9]/g, '');
    case 'telegram':
      return channel.value.startsWith('@') ? 'https://t.me/' + channel.value.slice(1) : 'https://t.me/' + channel.value;
    case 'email':
      return 'mailto:' + channel.value;
    case 'phone':
      return 'tel:' + channel.value;
    default:
      return channel.value.startsWith('http') ? channel.value : 'https://' + channel.value;
  }
}

function generateChannelsHtml(channels) {
  if (!channels || channels.length === 0) {
    return '<div class="hiclient-empty-state"><svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/></svg><p>Heç bir əlaqə mövcud deyil</p></div>';
  }

  // Filter main channels (without parentId)
  const mainChannels = channels.filter(ch => !ch.parentId);
  
  return mainChannels.map(channel => {
    const platform = getPlatformConfig(channel.type);
    const hasChildren = channel.childChannels && channel.childChannels.length > 0;
    
    if (hasChildren) {
      // Generate group with children
      const childrenHtml = [channel, ...channel.childChannels].map(childChannel => {
        const childPlatform = getPlatformConfig(childChannel.type);
        const childUrl = generateChannelUrl(childChannel);
        return '<a href="' + childUrl + '" target="_blank" class="hiclient-group-item" onclick="window.openChannel && window.openChannel(\'' + childUrl + '\')"><div class="hiclient-group-item-icon" style="background: ' + childPlatform.color + ';">' + childPlatform.icon + '</div><div class="hiclient-group-item-info"><div class="hiclient-group-item-label">' + childChannel.label + '</div><div class="hiclient-group-item-value">' + childChannel.value + '</div></div></a>';
      }).join('');
      
      return '<div class="hiclient-channel-group"><div class="hiclient-channel-item hiclient-group-trigger" onclick="toggleGroup(this)"><div class="hiclient-channel-icon" style="background: ' + platform.color + ';">' + platform.icon + '</div><div class="hiclient-channel-info"><div class="hiclient-channel-label">' + channel.label + '</div><div class="hiclient-channel-value">' + (channel.childChannels.length + 1) + ' seçim</div></div></div><div class="hiclient-group-dropdown">' + childrenHtml + '</div></div>';
    } else {
      // Generate individual channel
      const channelUrl = generateChannelUrl(channel);
      return '<a href="' + channelUrl + '" target="_blank" class="hiclient-channel-item" onclick="window.openChannel && window.openChannel(\'' + channelUrl + '\')"><div class="hiclient-channel-icon" style="background: ' + platform.color + ';">' + platform.icon + '</div><div class="hiclient-channel-info"><div class="hiclient-channel-label">' + channel.label + '</div><div class="hiclient-channel-value">' + channel.value + '</div></div><svg class="hiclient-external-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="m9 18 6-6-6-6"/></svg></a>';
    }
  }).join('');
}

function toggleGroup(trigger) {
  const group = trigger.closest('.hiclient-channel-group');
  group.classList.toggle('expanded');
}

function initializeWidget() {
  var button = document.querySelector(".hiclient-widget-button");
  var modal = document.querySelector(".hiclient-modal-backdrop");
  var tooltip = document.querySelector(".hiclient-tooltip");
  var closeBtn = document.querySelector(".hiclient-modal-close");
  var video = document.querySelector(".hiclient-video-player");
  var channelsContainer = document.querySelector("#channels-container");
  var emptyState = document.querySelector(".hiclient-empty-state");
  
  // Generate channels HTML
  if (channelsContainer && window.widgetConfig && window.widgetConfig.channels) {
    var channelsHtml = generateChannelsHtml(window.widgetConfig.channels);
    channelsContainer.innerHTML = channelsHtml;
    
    // Show/hide empty state
    if (emptyState) {
      var hasChannels = window.widgetConfig.channels && window.widgetConfig.channels.length > 0;
      emptyState.style.display = hasChannels ? 'none' : 'block';
    }
  }
  
  if (video) {
    video.muted = true;
    video.pause();
  }
  
  if (button && modal) {
    button.addEventListener("click", function(e) {
      e.preventDefault();
      modal.classList.add("show");
      document.body.style.overflow = 'hidden';
      
      if (video) {
        video.muted = false;
        video.currentTime = 0;
        video.play().catch(function(error) {
          console.log("Video autoplay blocked:", error);
        });
      }
    });
    
    function closeModal() {
      modal.classList.remove("show");
      document.body.style.overflow = '';
      if (video) {
        video.muted = true;
        video.pause();
      }
    }
    
    if (closeBtn) {
      closeBtn.addEventListener("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        closeModal();
      });
    }
    
    modal.addEventListener("click", function(e) {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    document.addEventListener("keydown", function(e) {
      if (e.key === "Escape" && modal.classList.contains("show")) {
        closeModal();
      }
    });
  }
  
  // Tooltip functionality
  if (tooltip && button) {
    if (window.widgetConfig && window.widgetConfig.tooltipDisplay === 'hover') {
      button.addEventListener("mouseenter", function() {
        tooltip.classList.add("show");
        tooltip.classList.remove("hide");
        tooltip.style.display = 'block';
      });
      button.addEventListener("mouseleave", function() {
        tooltip.classList.remove("show");
        tooltip.classList.add("hide");
      });
    } else if (window.widgetConfig && window.widgetConfig.tooltipDisplay === 'always') {
      tooltip.style.display = 'block';
      tooltip.classList.add("show");
    }
  }
  
  // Channel opening function
  window.openChannel = function(url) {
    window.open(url, "_blank");
  };
  
  // Make toggleGroup available globally
  window.toggleGroup = toggleGroup;
}

if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", initializeWidget);
} else {
  initializeWidget();
}`
});
