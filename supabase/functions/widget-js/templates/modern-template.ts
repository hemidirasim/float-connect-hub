
import type { WidgetTemplate } from '../template-types.ts'

export const getModernTemplate = (): WidgetTemplate => ({
  id: 'modern',
  name: 'Modern Gradient',
  description: 'Modern template with gradient effects and smooth animations',
  
  html: `
<!-- Modern Template -->
<div class="hiclient-widget-container" style="position: fixed; {{POSITION_STYLE}} bottom: 24px; z-index: 99999;">
  
  <!-- Powered by text -->
  <a href="https://hiclient.co" target="_blank" class="hiclient-powered-by" id="hiclient-powered-by" style="display: none;">
    powered by hiclient.co
  </a>
  
  <!-- Main Button -->
  <div class="hiclient-widget-button" id="hiclient-widget-button" style="width: {{BUTTON_SIZE}}px; height: {{BUTTON_SIZE}}px;">
    <svg id="hiclient-chat-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="color: white;"><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"/></svg>
    <svg id="hiclient-close-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="color: white; display: none;"><path d="m18 6-12 12M6 6l12 12"/></svg>
  </div>
  
  <!-- Tooltip -->
  <div class="hiclient-tooltip" id="hiclient-tooltip" style="{{TOOLTIP_POSITION_STYLE}} display: none;">
    {{TOOLTIP_TEXT}}
  </div>
</div>

<!-- Modal -->
<div class="hiclient-modal-backdrop" id="hiclient-modal-backdrop">
  <div class="hiclient-modal-content" id="hiclient-modal-content">
    <div class="hiclient-modal-header">
      <h3>{{GREETING_MESSAGE}}</h3>
      <button class="hiclient-modal-close" id="hiclient-modal-close" aria-label="Close">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="m18 6-12 12M6 6l12 12"/>
        </svg>
      </button>
    </div>
    
    {{VIDEO_CONTENT}}
    
    <div class="hiclient-channels-container" id="hiclient-channels-container">
      <!-- Channels will be generated by JavaScript -->
    </div>
    
    <div class="hiclient-empty-state" style="display: none;">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/>
      </svg>
      <p>Heç bir əlaqə mövcud deyil</p>
    </div>
  </div>
</div>`,

  css: `
/* Modern Template CSS */
.hiclient-widget-container {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif;
  user-select: none;
}

/* Main Button */
.hiclient-widget-button {
  border-radius: 50%;
  background: {{BUTTON_COLOR}};
  border: none;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  color: white;
  position: relative;
}

.hiclient-widget-button:hover {
  box-shadow: 0 12px 35px rgba(59, 130, 246, 0.5);
}

.hiclient-button-inner {
  color: white;
  font-size: 24px;
  z-index: 1;
}

/* Powered by text */
.hiclient-powered-by {
  position: absolute;
  right: calc(94% + 12px);
  top: 100%;
  transform: translateY(-50%);
  color: rgb(0, 0, 0);
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 10px;
  white-space: nowrap;
  opacity: 0;
  visibility: hidden;
  transition: 0.3s;
  pointer-events: auto;
  display: none;
  text-decoration: none;
  cursor: pointer;
}

.hiclient-powered-by:hover {
  background: rgba(0, 0, 0, 0.9);
  color: white;
  text-decoration: none;
}

.hiclient-powered-by.show {
  opacity: 1;
  visibility: visible;
  display: block;
}

/* Tooltip */
.hiclient-tooltip {
  position: absolute;
  background: rgba(20, 20, 20, 0.9);
  color: white;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 13px;
  white-space: nowrap;
  z-index: 100000;
  transition: all 0.2s ease;
  pointer-events: none;
  backdrop-filter: blur(10px);
}

/* Modal */
.hiclient-modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  z-index: 100000;
  display: none;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(8px);
}

.hiclient-modal-backdrop.show {
  opacity: 1;
  display: flex;
}

.hiclient-modal-content {
  background: white;
  padding: 32px;
  border-radius: 20px;
  max-width: 420px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  transform: scale(0.9) translateY(20px);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
  position: relative;
}

.hiclient-modal-backdrop.show .hiclient-modal-content {
  transform: scale(1) translateY(0);
}

.hiclient-modal-close {
  position: absolute;
  top: 16px;
  right: 20px;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: none;
  background: #f1f5f9;
  border-radius: 50%;
  color: #64748b;
  transition: all 0.2s ease;
}

.hiclient-modal-close:hover {
  background: #e2e8f0;
  color: #334155;
  transform: scale(1.1);
}

.hiclient-modal-header h3 {
  margin: 0 40px 24px 0;
  font-size: 24px;
  font-weight: 700;
  color: #1e293b;
  line-height: 1.3;
  text-align: center;
}

.hiclient-video-container {
  margin-bottom: 24px;
}

.hiclient-video-player {
  width: 100%;
  border-radius: 12px;
  object-fit: cover;
}

.hiclient-channels-container {
  display: grid;
  gap: 12px;
  margin-top: 24px;
}

.hiclient-channel-item {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 16px 20px;
  border: 2px solid #e2e8f0;
  border-radius: 16px;
  background: white;
  color: #334155;
  text-decoration: none;
  font-weight: 600;
  font-size: 15px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: pointer;
}

.hiclient-channel-item:hover {
  transform: translateY(-2px) scale(1.02);
  border-color: {{BUTTON_COLOR}};
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.1);
  background: linear-gradient(135deg, #fafafa, #ffffff);
}

.hiclient-channel-icon {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 20px;
  flex-shrink: 0;
  background: linear-gradient(135deg, #667eea, #764ba2);
}

.hiclient-channel-info {
  flex: 1;
  text-align: left;
}

.hiclient-channel-label {
  font-weight: 600;
  font-size: 15px;
  color: #334155;
  margin: 0 0 4px 0;
  line-height: 1.2;
}

.hiclient-channel-value {
  font-size: 13px;
  color: #64748b;
  margin: 0;
  line-height: 1.2;
}

.hiclient-empty-state {
  text-align: center;
  padding: 40px 20px;
  color: #64748b;
}

.hiclient-empty-state svg {
  margin-bottom: 16px;
  opacity: 0.5;
}

/* Channel group styles - CLICK ONLY */
.hiclient-channel-group {
  position: relative;
  margin-bottom: 12px;
}

.hiclient-group-trigger {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 16px 20px;
  border: 2px solid #e2e8f0;
  border-radius: 16px;
  background: white;
  color: #334155;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  width: 100%;
  text-align: left;
}

.hiclient-group-trigger:hover {
  transform: translateY(-2px) scale(1.02);
  border-color: {{BUTTON_COLOR}};
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.1);
  background: linear-gradient(135deg, #fafafa, #ffffff);
}

.hiclient-group-trigger::after {
  content: '▼';
  position: absolute;
  right: 20px;
  top: 50%;
  transform: translateY(-50%);
  font-size: 12px;
  color: #64748b;
  transition: transform 0.3s ease;
}

.hiclient-group-trigger.active::after {
  transform: translateY(-50%) rotate(180deg);
}

.hiclient-group-dropdown {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
  background: #f8fafc;
  border-radius: 12px;
  margin-top: 8px;
  border: 1px solid #e2e8f0;
}

.hiclient-group-dropdown.show {
  max-height: 300px;
}

.hiclient-group-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 14px 16px;
  text-decoration: none;
  color: #334155;
  transition: all 0.2s ease;
  border-bottom: 1px solid #e2e8f0;
  cursor: pointer;
}

.hiclient-group-item:last-child {
  border-bottom: none;
}

.hiclient-group-item:hover {
  background: #f1f5f9;
}

.hiclient-group-item-icon {
  width: 36px;
  height: 36px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
}

.hiclient-group-item-info {
  flex: 1;
  min-width: 0;
}

.hiclient-group-item-label {
  font-weight: 500;
  font-size: 14px;
  color: #334155;
  margin: 0 0 2px 0;
  line-height: 1.2;
}

.hiclient-group-item-value {
  font-size: 12px;
  color: #64748b;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  margin: 0;
  line-height: 1.2;
}

.hiclient-group-count {
  position: absolute;
  top: -8px;
  right: -8px;
  background: #3b82f6;
  color: white;
  font-size: 11px;
  font-weight: 600;
  padding: 2px 6px;
  border-radius: 10px;
  min-width: 18px;
  text-align: center;
  line-height: 1.2;
  box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
}

/* Mobile responsive */
@media (max-width: 768px) {
  .hiclient-modal-content {
    margin: 20px;
    padding: 24px;
    max-width: none;
  }
  
  .hiclient-modal-header h3 {
    font-size: 20px;
    margin-right: 30px;
  }
  
  .hiclient-channel-item {
    padding: 14px 16px;
    gap: 12px;
  }
  
  .hiclient-channel-icon {
    width: 42px;
    height: 42px;
  }
}`,

  js: `
(function() {
  console.log('Modern template loading...');
  
  const channelsData = {{CHANNELS_DATA}};
  let isModalOpen = false;
  let currentOpenGroupId = null;
  
  // Utility functions
  function getChannelUrl(channel) {
    switch (channel.type) {
      case 'whatsapp':
        return 'https://wa.me/' + channel.value.replace(/[^0-9]/g, '');
      case 'telegram':
        return channel.value.startsWith('@') ? 'https://t.me/' + channel.value.slice(1) : 'https://t.me/' + channel.value;
      case 'email':
        return 'mailto:' + channel.value;
      case 'phone':
        return 'tel:' + channel.value;
      default:
        return channel.value.startsWith('http') ? channel.value : 'https://' + channel.value;
    }
  }

  function getChannelIcon(channel) {
    if (channel.customIcon) {
      return '<img src="' + channel.customIcon + '" alt="' + (channel.label || 'Custom') + '" style="width: 32px; height: 32px; object-fit: contain;" />';
    }
    
    var icons = {
      whatsapp: '<img src="https://ttzioshkresaqmsodhfb.supabase.co/storage/v1/object/public/icons/social-media/007-social.png" alt="WhatsApp" style="width: 32px; height: 32px;" />',
      telegram: '<img src="https://ttzioshkresaqmsodhfb.supabase.co/storage/v1/object/public/icons/social-media/006-telegram.png" alt="Telegram" style="width: 32px; height: 32px;" />',
      instagram: '<img src="https://ttzioshkresaqmsodhfb.supabase.co/storage/v1/object/public/icons/social-media/002-instagram.png" alt="Instagram" style="width: 32px; height: 32px;" />',
      email: '<img src="https://ttzioshkresaqmsodhfb.supabase.co/storage/v1/object/public/icons/social-media/019-mail.png" alt="Email" style="width: 32px; height: 32px;" />',
      phone: '<img src="https://ttzioshkresaqmsodhfb.supabase.co/storage/v1/object/public/icons/social-media/telephone.png" alt="Phone" style="width: 32px; height: 32px;" />',
    };
    return icons[channel.type] || '🔗';
  }

  function generateChannelsHtml() {
    if (!channelsData || channelsData.length === 0) {
      document.querySelector('.hiclient-empty-state').style.display = 'block';
      return '';
    }
    
    let html = '';
    
    channelsData.forEach(function(channel) {
      const channelUrl = getChannelUrl(channel);
      const channelIcon = getChannelIcon(channel);
      
      if (channel.childChannels && channel.childChannels.length > 0) {
        // Group with children - CLICK ONLY
        const groupId = 'group-' + channel.id;
        
        html += '<div class="hiclient-channel-group">';
        html += '<button class="hiclient-group-trigger" onclick="toggleChannelGroup(' + "'" + groupId + "'" + ')">';
        html += '<div class="hiclient-channel-icon">' + channelIcon + '</div>';
        html += '<div class="hiclient-channel-info">';
        html += '<div class="hiclient-channel-label">' + escapeHtml(channel.label) + '</div>';
        html += '<div class="hiclient-channel-value">' + (channel.childChannels.length + 1) + ' kanal mövcuddur</div>';
        html += '</div>';
        html += '</button>';
        
        html += '<div class="hiclient-group-dropdown" id="' + groupId + '">';
        
        // Add parent channel first
        html += '<a href="' + escapeHtml(channelUrl) + '" target="_blank" class="hiclient-group-item">';
        html += '<div class="hiclient-group-item-icon">' + channelIcon + '</div>';
        html += '<div class="hiclient-group-item-info">';
        html += '<div class="hiclient-group-item-label">' + escapeHtml(channel.label) + '</div>';
        html += '<div class="hiclient-group-item-value">' + escapeHtml(channel.value) + '</div>';
        html += '</div>';
        html += '</a>';
        
        // Add child channels
        channel.childChannels.forEach(function(childChannel) {
          const childUrl = getChannelUrl(childChannel);
          const childIcon = getChannelIcon(childChannel);
          
          html += '<a href="' + escapeHtml(childUrl) + '" target="_blank" class="hiclient-group-item">';
          html += '<div class="hiclient-group-item-icon">' + childIcon + '</div>';
          html += '<div class="hiclient-group-item-info">';
          html += '<div class="hiclient-group-item-label">' + escapeHtml(childChannel.label) + '</div>';
          html += '<div class="hiclient-group-item-value">' + escapeHtml(childChannel.value) + '</div>';
          html += '</div>';
          html += '</a>';
        });
        
        html += '</div>';
        html += '</div>';
      } else {
        // Single channel
        html += '<a href="' + escapeHtml(channelUrl) + '" target="_blank" class="hiclient-channel-item">';
        html += '<div class="hiclient-channel-icon">' + channelIcon + '</div>';
        html += '<div class="hiclient-channel-info">';
        html += '<div class="hiclient-channel-label">' + escapeHtml(channel.label) + '</div>';
        html += '<div class="hiclient-channel-value">' + escapeHtml(channel.value) + '</div>';
        html += '</div>';
        html += '</a>';
      }
    });
    
    return html;
  }

  function escapeHtml(text) {
    if (!text) return '';
    return String(text)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }

  // Toggle channel group - CLICK ONLY
  window.toggleChannelGroup = function(groupId) {
    console.log('Toggling group:', groupId);
    const dropdown = document.getElementById(groupId);
    const trigger = document.querySelector('[onclick*="' + groupId + '"]');
    
    if (!dropdown || !trigger) {
      console.log('Elements not found for group:', groupId);
      return;
    }
    
    // Close other open groups
    if (currentOpenGroupId && currentOpenGroupId !== groupId) {
      const otherDropdown = document.getElementById(currentOpenGroupId);
      const otherTrigger = document.querySelector('[onclick*="' + currentOpenGroupId + '"]');
      
      if (otherDropdown && otherTrigger) {
        otherDropdown.classList.remove('show');
        otherTrigger.classList.remove('active');
      }
    }
    
    // Toggle current group
    const isOpen = dropdown.classList.contains('show');
    
    if (isOpen) {
      dropdown.classList.remove('show');
      trigger.classList.remove('active');
      currentOpenGroupId = null;
      console.log('Closed group:', groupId);
    } else {
      dropdown.classList.add('show');
      trigger.classList.add('active');
      currentOpenGroupId = groupId;
      console.log('Opened group:', groupId);
    }
  };

  function initModal() {
    const button = document.getElementById('hiclient-widget-button');
    const modal = document.getElementById('hiclient-modal-backdrop');
    const modalContent = document.getElementById('hiclient-modal-content');
    const closeBtn = document.getElementById('hiclient-modal-close');
    const channelsContainer = document.getElementById('hiclient-channels-container');
    const tooltip = document.getElementById('hiclient-tooltip');
    
    if (!button || !modal || !channelsContainer) {
      console.error('Required elements not found');
      return;
    }
    
    // Generate channels HTML
    channelsContainer.innerHTML = generateChannelsHtml();
    
    // Open modal on button click
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      if (isModalOpen) {
        console.log('Modal already open, closing...');
        closeModal();
        return;
      }
      
      isModalOpen = true;
      modal.classList.add('show');
      
      // Toggle button icons
      const chatIcon = document.getElementById('hiclient-chat-icon');
      const closeIcon = document.getElementById('hiclient-close-icon');
      if (chatIcon && closeIcon) {
        chatIcon.style.display = 'none';
        closeIcon.style.display = 'block';
      }
      
      // Show powered by text
      const poweredBy = document.getElementById('hiclient-powered-by');
      if (poweredBy) {
        poweredBy.classList.add('show');
      }
      
      // Hide tooltip when modal opens
      if (tooltip) {
        tooltip.style.display = 'none';
      }
    });
    
    // Close modal
    function closeModal() {
      isModalOpen = false;
      modal.classList.remove('show');
      
      // Toggle button icons back
      const chatIcon = document.getElementById('hiclient-chat-icon');
      const closeIcon = document.getElementById('hiclient-close-icon');
      if (chatIcon && closeIcon) {
        chatIcon.style.display = 'block';
        closeIcon.style.display = 'none';
      }
      
      // Hide powered by text
      const poweredBy = document.getElementById('hiclient-powered-by');
      if (poweredBy) {
        poweredBy.classList.remove('show');
      }
      
      // Close any open groups
      if (currentOpenGroupId) {
        const dropdown = document.getElementById(currentOpenGroupId);
        const trigger = document.querySelector('[onclick*="' + currentOpenGroupId + '"]');
        
        if (dropdown && trigger) {
          dropdown.classList.remove('show');
          trigger.classList.remove('active');
        }
        currentOpenGroupId = null;
      }
      
      // Show tooltip again if needed
      if (tooltip && '{{TOOLTIP_DISPLAY}}' === 'always') {
        tooltip.style.display = 'block';
      }
    }
    
    // Close button
    if (closeBtn) {
      closeBtn.addEventListener('click', closeModal);
    }
    
    // Close on backdrop click
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // Close on ESC key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && isModalOpen) {
        closeModal();
      }
    });
    
    // Tooltip handling
    if (tooltip && '{{TOOLTIP_DISPLAY}}' === 'always') {
      tooltip.style.display = 'block';
      tooltip.style.opacity = '1';
    }
    
    console.log('Modern template initialized successfully');
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initModal);
  } else {
    initModal();
  }
})();`
});
